package ru.eludia.products.mosgis.ejb.wsc.hash;

import java.io.ByteArrayOutputStream;

public class Gost341194 {

    private ByteArrayOutputStream baos = null;
    
    private HashContext hashContext = null;
    private final static SubstitutionBlock PARAMETERS = new SubstitutionBlock();
    
    static {
        byte[] k8 = new byte[] {0x1,0x3,0xA,0x9,0x5,0xB,0x4,0xF,0x8,0x6,0x7,0xE,0xD,0x0,0x2,0xC};
        byte[] k7 = new byte[] {0xD,0xE,0x4,0x1,0x7,0x0,0x5,0xA,0x3,0xC,0x8,0xF,0x6,0x2,0x9,0xB};
        byte[] k6 = new byte[] {0x7,0x6,0x2,0x4,0xD,0x9,0xF,0x0,0xA,0x1,0x5,0xB,0x8,0xE,0xC,0x3};
        byte[] k5 = new byte[] {0x7,0x6,0x4,0xB,0x9,0xC,0x2,0xA,0x1,0x8,0x0,0xE,0xF,0xD,0x3,0x5};
        byte[] k4 = new byte[] {0x4,0xA,0x7,0xC,0x0,0xF,0x2,0x8,0xE,0x1,0x6,0x5,0xD,0xB,0x9,0x3};
        byte[] k3 = new byte[] {0x7,0xF,0xC,0xE,0x9,0x4,0x1,0x0,0x3,0xB,0x5,0x2,0x6,0xA,0x8,0xD};
        byte[] k2 = new byte[] {0x5,0xF,0x4,0x0,0x2,0xD,0xB,0x9,0x1,0x7,0x6,0x3,0xC,0xE,0xA,0x8};
        byte[] k1 = new byte[] {0xA,0x4,0x5,0x6,0x8,0x1,0x3,0x7,0xD,0xC,0xE,0x0,0x9,0x2,0xB,0xF};

        System.arraycopy(k8, 0, PARAMETERS.k8, 0, 16);
        System.arraycopy(k7, 0, PARAMETERS.k7, 0, 16);
        System.arraycopy(k6, 0, PARAMETERS.k6, 0, 16);
        System.arraycopy(k5, 0, PARAMETERS.k5, 0, 16);
        System.arraycopy(k4, 0, PARAMETERS.k4, 0, 16);
        System.arraycopy(k3, 0, PARAMETERS.k3, 0, 16);
        System.arraycopy(k2, 0, PARAMETERS.k2, 0, 16);
        System.arraycopy(k1, 0, PARAMETERS.k1, 0, 16);
    };

    private void init() {
        final HashContext tmp = new HashContext ();
        tmp.init (PARAMETERS);
        hashContext = tmp;
    }

    public void update (byte b) {
        byte[] block = new byte[] {b};
        
        update (block, 0, 1);
    }
    
    public void update(byte[] block, int pos, int length) {
        if ( length < 0 && block != null )
            length = block.length;
        
        if (baos == null) {
            baos = new ByteArrayOutputStream ();
        }
        
        baos.write(block, pos, length);
    }

    public byte[] digest() {
        
        byte[] bytes = baos.toByteArray ();
        baos = null;
        
        init ();
        hashContext.hashBlock (bytes);
        
        return hashContext.finishHash();
    }
}